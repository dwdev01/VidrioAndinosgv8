{#
/**
 * @file
 * Default theme implementation to display a single page.
 *
 * The doctype, html, head and body tags are not in this template. Instead they
 * can be found in the html.html.twig template in this directory.
 *
 * Available variables:
 *
 * General utility variables:
 * - base_path: The base URL path of the Drupal installation. Will usually be
 *   "/" unless you have installed Drupal in a sub-directory.
 * - is_front: A flag indicating if the current page is the front page.
 * - logged_in: A flag indicating if the user is registered and signed in.
 * - is_admin: A flag indicating if the user has permission to access
 *   administration pages.
 *
 * Site identity:
 * - front_page: The URL of the front page. Use this instead of base_path when
 *   linking to the front page. This includes the language domain or prefix.
 *
 * Page content (in order of occurrence in the default page.html.twig):
 * - messages: Status and error messages. Should be displayed prominently.
 * - node: Fully loaded node, if there is an automatically-loaded node
 *   associated with the page and the node ID is the second argument in the
 *   page's path (e.g. node/12345 and node/12345/revisions, but not
 *   comment/reply/12345).
 *
 * Regions:
 * - page.header: Items for the header region.
 * - page.breadcrumb: Items for the breadcrumb region. 
 * - page.banner: Items for the banner region.
 * - page.content: The main content of the current page.
 * - page.sidebar: Items for the sidebar.
 * - page.footer-first: Items for the footer first region.
 * - page.footer-second: Items for the footer second region.
 * - page.footer-third: Items for the footer third region.
 * - page.footer: Items for the footer region.
 *
 * @see template_preprocess_page()
 * @see html.html.twig
 *
 * @ingroup themeable
 */
#}

<style>
  #container-loading {
    height: 100%;
    width: 100%;
    transition: all 1s ease;
  }

  #loading {
    border: 15px solid #e2e8f0;
    border-top-color: #ed8936;
    border-top-style: groove;
    height: 80px;
    width: 80px;
    border-radius: 100%;
    margin: 0 auto;
    animation: girar 1.5s linear infinite;
  }

  @keyframes girar {
    from {
      transform: rotate(0deg)
    }

    to {
      transform: rotate(360deg)
    }
  }

  .fade-enter-active,
  .fade-leave-active {
    transition: opacity .5s
  }

  .fade-enter,
  .fade-leave-to {
    opacity: 0
  }
</style>

<header role="header" class="shadow-md transition-all duration-300 fixed w-full bg-white z-50">
  {{ page.header }}
</header>

<div class="container grid grid-cols-12 gap-4 pt-32 pb-24">

  <main role="main" class="col-span-9">
    <a id="main-content" tabindex="-1"></a>{# link is in html.html.twig #}
    <div>
      {{ page.filter_content }}
    </div>
    {# /.layout-content #}
  </main>

  {% if page.sidebar %}
  <aside class="col-span-3" role="complementary">
    {{ page.sidebar }}
  </aside>
  {% endif %}
</div>
{# {% if page.footer %} #}
<footer role="footer" class="py-6 bg-gray-900 text-white">
  <div class="container px-6 py-6 md:px-4 sm:flex sm:flex-col md:grid md:grid-cols-3 md:gap-24">
    <div class="pb-6">
      {{ page.footer_firts }}
    </div>
    <div class="pb-6">
      {{ page.footer_second }}
    </div>
    <div>
      {{ page.footer_third }}
    </div>
  </div>
  {{ page.footer }}
</footer>
{# {% endif %} #}



<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/locale/es.js"></script>
<script>
  // Vuejs app
  let app = new Vue({
    el: "#app",
    data() {
      return {
        posts: null,
        url: window.location.origin,
        loading: true,
        errored: false
      }
    },
    mounted() {
      axios
        .get("https://sgvad8.vidrioandino.com/api/blog_post?_format=json")
        .then(response => {
          const taxonomy = window.location.pathname.split('/')[2]
          let filter = response.data.filter(filter => {
            let isTrue = false
            filter[`field_${taxonomy}`].map(category => {
              if (category.url == window.location.pathname) {
                isTrue = true
              }
            })
            if (isTrue) {
              return filter
            }
          })
          this.posts = filter
        })
        .catch(error => {
          console.log(error)
          this.errored = true
        })
        .finally(() => this.loading = false)
    },
    methods: {
      read: function(content) {
        const readPromedio = 250
        const readValue = content.body[0].processed.split(' ').length
        const readResult = Math.ceil(readValue / readPromedio)

        return readResult
      },
      formatDate: function(date) {
        moment.locale('es')
        return moment(date).format("MMM DD YYYY");
      }
    }
  });
</script>