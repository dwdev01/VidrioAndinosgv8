{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<div class="container opacity-0 transition-all px-6 duration-300 newPost flex flex-col items-center lg:items-start lg:grid lg:gap-10">
  <article class="my-0" {{ attributes.addClass('node') }}>

    {{ title_prefix }}
    {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
      {% endif %}
      {{ title_suffix }}

      {% if display_submitted %}
      <footer>
        {{ author_picture }}
        <div{{ author_attributes }}>
          {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
          {{ metadata }}
</div>
</footer>
{% endif %}

<div{{ content_attributes.addClass('node-content') }}>
  {{ content }}
  </div>

  </article>
  <div class="new-aside hidden lg:block w-full xl:w-1/2 mx-auto relative h-full">

  </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Position the aside
      const newAside = document.querySelector('.new-aside')
      const newAsideEl = document.createDocumentFragment()
      const aside = document.querySelector('aside');

      aside.classList.add('sticky')
      aside.style.top = "100px"

      newAsideEl.appendChild(aside)
      newAside.appendChild(newAsideEl)
      // Create element title
      const newTitleEl = document.createElement('h1')
      const newTitle = document.querySelector('#block-tailwindcss-page-title h1 span')

      newTitleEl.classList.add('text-2xl', 'font-bold', 'text-gray-800', 'pt-4', 'pb-2')
      newTitleEl.innerText = newTitle.textContent

      document.querySelector('.node-content').insertBefore(newTitleEl, document.querySelector('.node-content div:nth-child(2)'))
      // Add icon Date
      let dateBase = document.querySelector('time').textContent
      const dateFirtsFormated = dateBase.split(',')
      const dateSecondFormated = dateFirtsFormated[1].split('-')

      document.querySelector('time').innerHTML = `<i class="icon-calendar"></i>` + dateSecondFormated[0]
      // Create element of social medias
      const redesSociales = document.createElement('div')

      redesSociales.classList.add('lg:py-4')
      redesSociales.innerHTML = `
        <span class="text-lg font-medium text-gray-700">Compartir</span>
        <div class="flex mt-2">
          <a href="https://www.facebook.com/sharer/sharer.php?u=${window.location.href}"
             target="_blank" 
             class="flex
                   justify-center
                   items-center 
                    transition 
                    duration-300 
                    rounded 
                    mr-2 
                    w-auto 
                    text-xl 
                    p-1 
                    bg-blue-800 
                    hover:bg-blue-700 
                    text-white"
            style="width: 36px !important; height: 38px !important">
              <i class="icon-facebook"></i>
            </a>
          <a href="https://api.whatsapp.com/send?text=${window.location.href}"
              target="_blank" 
              class="flex
                    justify-center
                    items-center 
                    transition 
                    duration-300 
                    rounded 
                    mr-2 
                    w-auto 
                    text-xl 
                    p-1 
                    bg-green-500 
                    hover:bg-green-400 
                    text-white"
              style="width: 36px !important; height: 38px !important">
            <i class="icon-whatsapp"></i>
          </a>
          <a href="https://www.linkedin.com/shareArticle?mini=true&url=${window.location.href}" 
              target="_blank" 
              class="flex
                    justify-center
                    items-center 
                     transition 
                     duration-300 
                     rounded 
                     w-auto 
                     text-xl 
                     p-1 
                     bg-blue-600 
                     hover:bg-blue-500  
                     text-white"
              style="width: 36px !important; height: 38px !important">
            <i class="icon-linkedin"
            ></i>
          </a>
        </div>
      `

      let categorySelected = document.querySelector('.node-content div:nth-of-type(6) a').text.toUpperCase()
      document.querySelectorAll('#block-views-block-news-categories-block-1 .views-field-name span a').forEach((item, i) => {
        if (categorySelected == item.text.toUpperCase()) {
          const test = document.querySelectorAll('#block-views-block-news-categories-block-1 .views-row')[i].classList.add('text-blue-500')
          console.log(test)
        }
      })
      categorySelected = document.querySelector('.node-content div:nth-of-type(6)').classList.add('hidden')

      const md = window.matchMedia("(min-width: 1024px)")
      const changeSize = mql => {
        mql.matches ?
          aside.appendChild(redesSociales) :
          document.querySelector('.node-content div:nth-of-type(5)').appendChild(redesSociales)
      }

      md.addListener(changeSize)
      changeSize(md)


      // Delete the class opacity of parent
      setTimeout(function() {
        document.querySelector('.newPost').classList.remove('opacity-0')
      }, 300)
    })
  </script>